- name: Create instances
  os_server:
    cloud: "{{ openstack_cloud | default('openstack') }}"
    name: "{{ __server_create.instance_name }}"
    state: "{{ openstack_server_state | default(__server_create.state) | default('present') }}"
    image: "{{ __server_create.image | default('rhel-7.6') }}"
    flavor: "{{ __server_create.flavor | default('m2.medium') }}"
    key_name: "{{ __server_create.key_name | default('ansible_ssh_key') }}"
    wait: "{{ __server_create.wait | default('yes') }}"
    security_groups: "{{ __server_create.security_group_name }}"
    delete_fip: "{{__server_create.delete_fip | default(true) }}"
    meta: "group={{ __server_create.group }},deployment_name={{ __server_create.deployment }}"
    nics:
      - net-name: int_network
      #    - net-name: ext_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
  loop: "{{ openstack_servers }}"
  loop_control:
    loop_var: __server_create
  async: 900
  poll: 0
  register: r_instances
  
- name: Wait for async OSP instance creation to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: r_wait
  until: r_wait.finished
  retries: 900
  loop: "{{ r_instances.results }}"

- name: Debug instances 
  debug:
    msg: "Server is {{ __instance.__server_create.instance_name }}"
    verbosity: 2
  loop: "{{ r_instances.results }}"
  loop_control:
    loop_var: __instance

- when: openstack_server_state != 'absent' | default(true)
  block:

    - name: Add floating IP to instances
      os_floating_ip:
        cloud: openstack
        state: "{{ openstack_server_state | default('present') }}"
        reuse: yes
        server: "{{ __instance.__server_create.instance_name }}"
        network: ext_network
        wait: true
        timeout: 180
      loop: "{{ r_instances.results }}"
      loop_control:
        loop_var: __instance
      register: r_floating_ips

    - name: Wait for servers by name to be available
      wait_for:
        host: "{{ __fip.floating_ip.floating_ip_address }}"
        port: 22
        search_regex: OpenSSH
        timeout: 600
      loop: "{{ r_floating_ips.results }}"
      loop_control:
        loop_var: __fip
      delegate_to: "{{ inventory_hostname }}"

...
